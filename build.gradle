buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath Libs.kotlin_gradle_plugin
        classpath Libs.gradle_cobertura_plugin
        classpath Libs.coveralls_gradle_plugin
        classpath Libs.com_jfrog_bintray_gradle_plugin
        classpath Libs.nebula_provided_base_gradle_plugin
    }
}

plugins {
    id 'com.github.kt3k.coveralls' version "2.9.0"
    id "com.jfrog.bintray" version "1.8.4"
    id 'de.fayard.buildSrcVersions' version "0.7.0"
    id 'nebula.provided-base' version "3.0.3"
    id 'net.saliman.cobertura' version "3.0.0"
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }

    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'cobertura'
    apply plugin: 'com.github.kt3k.coveralls'
    apply plugin: 'nebula.provided-base'

    jacoco {
        toolVersion = '0.8.3'
    }

    cobertura.coverageFormats = ['html', 'xml']
    cobertura.coverageSourceDirs = ['src/main/kotlin']

    compileKotlin.kotlinOptions.jvmTarget = "1.8"
    compileTestKotlin.kotlinOptions.jvmTarget = "1.8"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = project.hasProperty('releaseVersion') ? project.releaseVersion : 'LOCAL'
    group = 'org.http4k'

    test {
        useJUnitPlatform()
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }


    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
        }
    }
}

compileTestKotlin.kotlinOptions {
    jvmTarget = "1.8"
}

coveralls {
    sourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs).files.absolutePath
    jacocoReportPath = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
}

task jacocoRootReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getSourceDirectories().from(subprojects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from(subprojects.sourceSets.main.output)
    getExecutionData().from(subprojects.jacocoTestReport.executionData)

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${buildDir}/reports/jacoco/test/jacocoRootReport.xml")
    }
}

dependencies {
    provided Libs.kotlin_stdlib_jdk8

    provided project(":krostini-core")
    provided project(":krostini-openapi3")
    provided project(":krostini-simple")

    testCompile Config.TestDependencies
}

buildSrcVersions {
    indent = "    "
}

// To update Gradle, run `$ ./gradlew :buildSrcVersions && ./gradlew wrapper`
wrapper {
    gradleVersion = Versions.gradleLatestVersion
    distributionType = Wrapper.DistributionType.ALL
}
